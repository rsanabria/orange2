{"version":3,"sources":["common/effects/auth.effect.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAI3C,wBAAqC,eAIrC,CAAC,CAJmD;AAKpD;IAOE,qBAAoB,QAA4B;QAPlD,iBAiCC;QA1BqB,aAAQ,GAAR,QAAQ,CAAoB;QANzC,aAAQ,GAAG;YACjB,EAAC,OAAO,EAAG,MAAM;gBAChB,QAAQ,EAAE,OAAO;gBACjB,IAAI,EAAE,GAAG;aACV;SACD,CAAC;QAQS,WAAM,GAAE,IAAI,CAAC,QAAQ;aAC5B,UAAU,CAAC,QAAQ,CAAC;aAClB,GAAG,CAAC,UAAA,IAAI;YACP,IAAI,CAAC,GAAG,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACnD,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACN,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;oBAC9C,MAAM,CAAC,CAAC,EAAC,IAAI,EAAE,gBAAgB,EAAE,OAAO,EAAG,EAAE,OAAO,EAAG,CAAC,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAG,CAAC,CAAC,IAAI,EAAE,EAAC,CAAC,CAAC;YACxG,CAAC;YACD,MAAM,CAAC,CAAC,EAAC,IAAI,EAAE,eAAe,EAAE,OAAO,EAAG,EAAE,OAAO,EAAG,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAC,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;IAfP,CAAC;IACO,8BAAQ,GAAhB,UAAkB,CAAS;QAC3B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,OAAO;YAC/B,MAAM,CAAC,OAAO,CAAC,OAAO,KAAK,CAAC,CAAA;QAAC,CAAC,CAAC,CAAC;IACpC,CAAC;IAEC;QAAC,gBAAM,EAAE;;+CAAA;IAfX;QAAC,iBAAU,EAAE;;mBAAA;IAkCb,kBAAC;AAAD,CAjCA,AAiCC,IAAA;AAjCY,mBAAW,cAiCvB,CAAA","file":"common/effects/auth.effect.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport {  Router } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport { Action } from '@ngrx/store';\nimport { StateUpdates, Effect } from '@ngrx/effects'\n\n\n\n@Injectable() \nexport class AuthEffects {\n private usuarios = [\n   {usuario : 'test',\n    password: 'test@',\n    ruta: '/'\n  }\n ];\n  constructor(private updates$ : StateUpdates<any>) {\n  }\n  private findUser (u: string) {\n  return this.usuarios.find(usuario => { \n    return usuario.usuario === u });\n} \n\n  @Effect() login$ =this.updates$\n    .whenAction('LOG_IN')\n      .map(info => {\n        var u = this.findUser(info.action.payload.usuario);\n        if (u) {\n          if (u.password === info.action.payload.password)\n            return ({type: 'LOG_IN_SUCCESS', payload : { usuario : u.usuario, isLogged: true, ruta : u.ruta }});\n        }\n        return ({type: 'LOG_IN_FAILED', payload : { usuario : '', isLogged: false }});\n      });\n      /*En espera que funcione el router desde aqui*/\n      \n/*  @Effect() login_success$ = this.updates$\n    .whenAction('LOG_IN_SUCCESS')\n      .map(info => {\n        if (info.action.payload.isLogged) {\n          //this.router.navigateByUrl(info.action.payload.ruta);\n        }\n      } );*/\n}\n\n     \n\n\n"],"sourceRoot":"/source/"}